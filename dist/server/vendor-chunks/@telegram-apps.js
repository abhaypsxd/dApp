"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@telegram-apps";
exports.ids = ["vendor-chunks/@telegram-apps"];
exports.modules = {

/***/ "(ssr)/./node_modules/@telegram-apps/bridge/dist/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@telegram-apps/bridge/dist/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   $debug: () => (/* binding */ ae),\n/* harmony export */   $targetOrigin: () => (/* binding */ ue),\n/* harmony export */   CancelablePromise: () => (/* binding */ w),\n/* harmony export */   ERR_ABORTED: () => (/* binding */ ne),\n/* harmony export */   ERR_CANCELED: () => (/* binding */ re),\n/* harmony export */   ERR_CUSTOM_METHOD_ERR_RESPONSE: () => (/* binding */ Ke),\n/* harmony export */   ERR_METHOD_PARAMETER_UNSUPPORTED: () => (/* binding */ Ge),\n/* harmony export */   ERR_METHOD_UNSUPPORTED: () => (/* binding */ Be),\n/* harmony export */   ERR_RETRIEVE_LP_FAILED: () => (/* binding */ He),\n/* harmony export */   ERR_TIMED_OUT: () => (/* binding */ oe),\n/* harmony export */   ERR_UNKNOWN_ENV: () => (/* binding */ Ve),\n/* harmony export */   EnhancedPromise: () => (/* binding */ A),\n/* harmony export */   TypedError: () => (/* binding */ b),\n/* harmony export */   addEventListener: () => (/* binding */ x),\n/* harmony export */   camelToKebab: () => (/* binding */ ct),\n/* harmony export */   camelToSnake: () => (/* binding */ ut),\n/* harmony export */   captureSameReq: () => (/* binding */ tt),\n/* harmony export */   compareVersions: () => (/* binding */ nt),\n/* harmony export */   createAbortError: () => (/* binding */ M),\n/* harmony export */   createCbCollector: () => (/* binding */ L),\n/* harmony export */   createLogger: () => (/* binding */ Oe),\n/* harmony export */   createPostEvent: () => (/* binding */ Et),\n/* harmony export */   createTypedErrorPredicate: () => (/* binding */ O),\n/* harmony export */   defineEventHandlers: () => (/* binding */ gt),\n/* harmony export */   deleteCssVar: () => (/* binding */ lt),\n/* harmony export */   emitMiniAppsEvent: () => (/* binding */ k),\n/* harmony export */   getStorageValue: () => (/* binding */ Le),\n/* harmony export */   hasWebviewProxy: () => (/* binding */ ee),\n/* harmony export */   invokeCustomMethod: () => (/* binding */ yt),\n/* harmony export */   isAbortError: () => (/* binding */ st),\n/* harmony export */   isCanceledError: () => (/* binding */ at),\n/* harmony export */   isIframe: () => (/* binding */ De),\n/* harmony export */   isTMA: () => (/* binding */ _t),\n/* harmony export */   isTimeoutError: () => (/* binding */ ot),\n/* harmony export */   mockTelegramEnv: () => (/* binding */ bt),\n/* harmony export */   off: () => (/* binding */ ht),\n/* harmony export */   on: () => (/* binding */ Je),\n/* harmony export */   postEvent: () => (/* binding */ pe),\n/* harmony export */   removeEventHandlers: () => (/* binding */ wt),\n/* harmony export */   request: () => (/* binding */ fe),\n/* harmony export */   resetPackageState: () => (/* binding */ vt),\n/* harmony export */   retrieveLaunchParams: () => (/* binding */ Qe),\n/* harmony export */   setCssVar: () => (/* binding */ ft),\n/* harmony export */   setStorageValue: () => (/* binding */ ke),\n/* harmony export */   sleep: () => (/* binding */ it),\n/* harmony export */   snakeToCamel: () => (/* binding */ pt),\n/* harmony export */   subscribe: () => (/* binding */ dt),\n/* harmony export */   supports: () => (/* binding */ B),\n/* harmony export */   unsubscribe: () => (/* binding */ mt)\n/* harmony export */ });\nlet v = class H extends Error {\n  constructor(t, n, r) {\n    super(\n      typeof n == \"object\" ? n.message : n || t,\n      {\n        cause: typeof n == \"object\" ? n.cause : r\n      }\n    ), this.type = t, Object.setPrototypeOf(this, H.prototype);\n  }\n};\nfunction G(e) {\n  return e.replace(/[A-Z]/g, (t) => `_${t.toLowerCase()}`);\n}\nfunction we(e) {\n  return e.replace(/_[a-z]/g, (t) => t[1].toUpperCase());\n}\nconst he = \"ERR_INVALID_VALUE\", de = \"ERR_UNEXPECTED_VALUE\", me = \"ERR_UNEXPECTED_TYPE\", V = \"ERR_PARSE\";\nfunction K(e, t) {\n  const n = {};\n  for (const r in e) {\n    const o = e[r];\n    if (!o)\n      continue;\n    let s, a;\n    typeof o == \"function\" ? (s = r, a = o) : [s, a] = o;\n    try {\n      const i = a(t(s));\n      i !== void 0 && (n[r] = i);\n    } catch (i) {\n      throw new v(\n        V,\n        `Parser for \"${r}\" property failed${s === r ? \"\" : `. Source field: \"${s}\"`}`,\n        i\n      );\n    }\n  }\n  return n;\n}\nfunction Z(e) {\n  let t = e;\n  if (typeof t == \"string\")\n    try {\n      t = JSON.parse(t);\n    } catch (n) {\n      throw new v(he, { cause: n });\n    }\n  if (typeof t != \"object\" || !t || Array.isArray(t))\n    throw new v(de);\n  return t;\n}\nfunction g(e, t) {\n  return (n) => {\n    const r = (o) => {\n      if (!(n && o === void 0))\n        try {\n          return t(o);\n        } catch (s) {\n          throw new v(V, {\n            message: `\"${e}\" transformer failed to parse the value`,\n            cause: s\n          });\n        }\n    };\n    return /* @__PURE__ */ Object.assign(\n      r,\n      {\n        isValid(o) {\n          try {\n            return r(o), !0;\n          } catch {\n            return !1;\n          }\n        }\n      }\n    );\n  };\n}\nfunction _(e, t) {\n  return g(t || \"object\", (n) => {\n    const r = Z(n);\n    return K(e, (o) => r[o]);\n  });\n}\nfunction R(e) {\n  throw new v(me, `Unexpected value received: ${JSON.stringify(e)}`);\n}\nconst $ = g(\"boolean\", (e) => {\n  if (typeof e == \"boolean\")\n    return e;\n  const t = String(e);\n  if (t === \"1\" || t === \"true\")\n    return !0;\n  if (t === \"0\" || t === \"false\")\n    return !1;\n  R(e);\n}), l = g(\"string\", (e) => {\n  if (typeof e == \"string\" || typeof e == \"number\")\n    return e.toString();\n  R(e);\n}), P = g(\"number\", (e) => {\n  if (typeof e == \"number\")\n    return e;\n  if (typeof e == \"string\") {\n    const t = Number(e);\n    if (!Number.isNaN(t))\n      return t;\n  }\n  R(e);\n}), Ee = g(\"date\", (e) => e instanceof Date ? e : new Date(P()(e) * 1e3));\nfunction z(e, t) {\n  return g(t || \"searchParams\", (n) => {\n    typeof n != \"string\" && !(n instanceof URLSearchParams) && R(n);\n    const r = typeof n == \"string\" ? new URLSearchParams(n) : n;\n    return K(e, (o) => {\n      const s = r.get(o);\n      return s === null ? void 0 : s;\n    });\n  });\n}\nfunction U(e) {\n  for (const t in e)\n    e[t] = [G(t), e[t]];\n  return e;\n}\nconst ye = (e) => {\n  const t = P(), n = P(!0), r = l(), o = l(!0), s = $(!0), a = _(U({\n    addedToAttachmentMenu: s,\n    allowsWriteToPm: s,\n    firstName: r,\n    id: t,\n    isBot: s,\n    isPremium: s,\n    languageCode: o,\n    lastName: o,\n    photoUrl: o,\n    username: o\n  }), \"User\")(!0);\n  return z(\n    U({\n      authDate: Ee(),\n      canSendAfter: n,\n      chat: _(\n        U({\n          id: t,\n          type: r,\n          title: r,\n          photoUrl: o,\n          username: o\n        }),\n        \"Chat\"\n      )(!0),\n      chatInstance: o,\n      chatType: o,\n      hash: r,\n      queryId: o,\n      receiver: a,\n      startParam: o,\n      user: a\n    }),\n    \"initData\"\n  )(e);\n};\nfunction ve(e) {\n  return /^#[\\da-f]{6}$/i.test(e);\n}\nfunction Pe(e) {\n  return /^#[\\da-f]{3}$/i.test(e);\n}\nfunction Re(e) {\n  const t = e.replace(/\\s/g, \"\").toLowerCase();\n  if (ve(t))\n    return t;\n  if (Pe(t)) {\n    let r = \"#\";\n    for (let o = 0; o < 3; o += 1)\n      r += t[1 + o].repeat(2);\n    return r;\n  }\n  const n = t.match(/^rgb\\((\\d{1,3}),(\\d{1,3}),(\\d{1,3})\\)$/) || t.match(/^rgba\\((\\d{1,3}),(\\d{1,3}),(\\d{1,3}),\\d{1,3}\\)$/);\n  if (!n)\n    throw new Error(`Value \"${e}\" does not satisfy any of known RGB formats.`);\n  return n.slice(1).reduce((r, o) => {\n    const s = parseInt(o, 10).toString(16);\n    return r + (s.length === 1 ? \"0\" : \"\") + s;\n  }, \"#\");\n}\nconst Te = g(\"rgb\", (e) => Re(l()(e))), Se = g(\n  \"themeParams\",\n  (e) => {\n    const t = Te(!0);\n    return Object.entries(Z(e)).reduce((n, [r, o]) => (n[we(r)] = t(o), n), {});\n  }\n);\n// @__NO_SIDE_EFFECTS__\nfunction X(e) {\n  return JSON.stringify(\n    Object.fromEntries(\n      Object.entries(e).map(([t, n]) => [G(t), n])\n    )\n  );\n}\nconst Ae = (e) => {\n  const t = l(), n = l(!0), r = $(!0);\n  return z({\n    botInline: [\"tgWebAppBotInline\", r],\n    initData: [\"tgWebAppData\", ye(!0)],\n    initDataRaw: [\"tgWebAppData\", n],\n    platform: [\"tgWebAppPlatform\", t],\n    showSettings: [\"tgWebAppShowSettings\", r],\n    startParam: [\"tgWebAppStartParam\", n],\n    themeParams: [\"tgWebAppThemeParams\", Se()],\n    version: [\"tgWebAppVersion\", t]\n  }, \"launchParams\")(e);\n};\n// @__NO_SIDE_EFFECTS__\nfunction $e(e) {\n  const { initDataRaw: t, startParam: n, showSettings: r, botInline: o } = e, s = new URLSearchParams();\n  return s.set(\"tgWebAppPlatform\", e.platform), s.set(\"tgWebAppThemeParams\", /* @__PURE__ */ X(e.themeParams)), s.set(\"tgWebAppVersion\", e.version), t && s.set(\"tgWebAppData\", t), n && s.set(\"tgWebAppStartParam\", n), typeof r == \"boolean\" && s.set(\"tgWebAppShowSettings\", r ? \"1\" : \"0\"), typeof o == \"boolean\" && s.set(\"tgWebAppBotInline\", o ? \"1\" : \"0\"), s.toString();\n}\nconst Y = _({\n  eventType: l(),\n  eventData: (e) => e\n}, \"miniAppsMessage\"), Q = g(\"fn\", (e) => {\n  if (typeof e == \"function\")\n    return e;\n  R(e);\n});\nfunction Ne(e) {\n  return !!e && typeof e == \"object\" && !Array.isArray(e);\n}\nconst Ce = _({\n  TelegramWebviewProxy: _({ postEvent: Q() })()\n});\nfunction ee(e) {\n  return Ce().isValid(e);\n}\nfunction De() {\n  try {\n    return window.self !== window.top;\n  } catch {\n    return !0;\n  }\n}\nvar Ue = Object.defineProperty, je = (e, t, n) => t in e ? Ue(e, t, { enumerable: !0, configurable: !0, writable: !0, value: n }) : e[t] = n, te = (e, t, n) => je(e, typeof t != \"symbol\" ? t + \"\" : t, n);\nclass b extends Error {\n  constructor(t, n, r) {\n    super(\n      typeof n == \"object\" ? n.message : n || t,\n      {\n        cause: typeof n == \"object\" ? n.cause : r\n      }\n    ), this.type = t, Object.setPrototypeOf(this, b.prototype);\n  }\n}\nfunction x(e, t, n) {\n  return e.addEventListener(t, n), () => e.removeEventListener(t, n);\n}\nfunction L(...e) {\n  const t = e.flat(1);\n  return [\n    t.push.bind(t),\n    () => {\n      t.forEach((n) => {\n        n();\n      });\n    }\n  ];\n}\nfunction xe(e, t) {\n  return e instanceof b && e.type === t;\n}\nfunction O(e) {\n  return (t) => xe(t, e);\n}\nconst ne = \"ERR_ABORTED\", re = \"ERR_CANCELED\", oe = \"ERR_TIMED_OUT\";\nfunction M(e) {\n  return new b(ne, { cause: e });\n}\nconst ot = O(oe), st = O(ne), at = O(re);\nfunction q(e, t) {\n  return e.reject = t.reject, e;\n}\nclass w extends Promise {\n  constructor(t, n) {\n    let r, o;\n    typeof t == \"function\" ? (r = t, o = n) : o = t;\n    let s, a;\n    super((i, c) => {\n      o || (o = {});\n      const { abortSignal: u } = o;\n      if (u && u.aborted)\n        return c(M(u.reason));\n      const [f, h] = L(), d = (m) => (...ge) => (h(), m(...ge)), T = new AbortController(), { signal: S } = T;\n      a = d((m) => {\n        T.abort(m), c(m);\n      }), s = d(i), u && f(\n        x(u, \"abort\", () => {\n          a(M(u.reason));\n        })\n      );\n      const { timeout: D } = o;\n      if (D) {\n        const m = setTimeout(() => {\n          a(new b(oe, `Timeout reached: ${D}ms`));\n        }, D);\n        f(() => {\n          clearTimeout(m);\n        });\n      }\n      r && r(s, a, S);\n    }), te(this, \"reject\"), this.reject = a;\n  }\n  /**\n   * Creates a new BetterPromise instance using executor, resolving promise when a result\n   * was returned.\n   * @param fn - function returning promise result.\n   * @param options - additional options.\n   */\n  static withFn(t, n) {\n    return new w((r, o, s) => {\n      try {\n        const a = t(s);\n        return a instanceof Promise ? a.then(r, o) : r(a);\n      } catch (a) {\n        o(a);\n      }\n    }, n);\n  }\n  /**\n   * @see Promise.resolve\n   */\n  static resolve(t) {\n    return new w((n) => {\n      n(t);\n    });\n  }\n  /**\n   * @see Promise.reject\n   */\n  static reject(t) {\n    return new w((n, r) => {\n      r(t);\n    });\n  }\n  /**\n   * Cancels the promise execution.\n   */\n  cancel() {\n    this.reject(new b(re));\n  }\n  /**\n   * @see Promise.catch\n   */\n  catch(t) {\n    return this.then(void 0, t);\n  }\n  /**\n   * @see Promise.finally\n   */\n  finally(t) {\n    return q(super.finally(t), this);\n  }\n  /**\n   * @see Promise.then\n   */\n  then(t, n) {\n    return q(super.then(t, n), this);\n  }\n}\nfunction F(e, t) {\n  return e.resolve = t.resolve, e;\n}\nclass A extends w {\n  constructor(t, n) {\n    let r, o;\n    typeof t == \"function\" ? (r = t, o = n) : o = t;\n    let s;\n    super((a, i, c) => {\n      s = a, r && r(a, i, c);\n    }, o), te(this, \"resolve\"), this.resolve = s;\n  }\n  /**\n   * Creates a new EnhancedPromise instance using executor, resolving promise when a result\n   * was returned.\n   * @param fn - function returning promise result.\n   * @param options - additional options.\n   */\n  static withFn(t, n) {\n    return new A(\n      (r, o, s) => w.withFn(t, { abortSignal: s }).then(r, o),\n      n\n    );\n  }\n  /**\n   * @see Promise.resolve\n   */\n  static resolve(t) {\n    return new A((n) => {\n      n(t);\n    });\n  }\n  /**\n   * @see Promise.reject\n   */\n  static reject(t) {\n    return new A((n, r) => {\n      r(t);\n    });\n  }\n  /**\n   * @see Promise.catch\n   */\n  catch(t) {\n    return this.then(void 0, t);\n  }\n  /**\n   * @see Promise.finally\n   */\n  finally(t) {\n    return F(super.finally(t), this);\n  }\n  /**\n   * @see Promise.then\n   */\n  then(t, n) {\n    return F(super.then(t, n), this);\n  }\n}\nfunction it(e, t) {\n  return new w((n) => {\n    setTimeout(n, e);\n  }, { abortSignal: t });\n}\nfunction se(e) {\n  return `tapps/${e}`;\n}\nfunction ke(e, t) {\n  sessionStorage.setItem(se(e), JSON.stringify(t));\n}\nfunction Le(e) {\n  const t = sessionStorage.getItem(se(e));\n  try {\n    return t ? JSON.parse(t) : void 0;\n  } catch {\n  }\n}\nfunction ct(e) {\n  return e.replace(/[A-Z]/g, (t) => `-${t.toLowerCase()}`);\n}\nfunction ut(e) {\n  return e.replace(/[A-Z]/g, (t) => `_${t.toLowerCase()}`);\n}\nfunction pt(e) {\n  return e.replace(/_[a-z]/g, (t) => t[1].toUpperCase());\n}\n// @__NO_SIDE_EFFECTS__\nfunction Oe(e, t) {\n  t || (t = {});\n  const {\n    textColor: n,\n    bgColor: r,\n    shouldLog: o = !0\n  } = t;\n  function s(a, ...i) {\n    if (!o || typeof o == \"function\" && !o())\n      return;\n    const c = \"font-weight:bold;padding:0 5px;border-radius:5px\";\n    console[a](\n      `%c${Intl.DateTimeFormat(\"en-GB\", {\n        hour: \"2-digit\",\n        minute: \"2-digit\",\n        second: \"2-digit\",\n        fractionalSecondDigits: 3,\n        timeZone: \"UTC\"\n      }).format(/* @__PURE__ */ new Date())}%c / %c${e}`,\n      `${c};background-color: lightblue;color:black`,\n      \"\",\n      `${c};${n ? `color:${n};` : \"\"}${r ? `background-color:${r}` : \"\"}`,\n      ...i\n    );\n  }\n  return [\n    function(...a) {\n      s(\"log\", ...a);\n    },\n    function(...a) {\n      s(\"error\", ...a);\n    }\n  ];\n}\nfunction ft(e, t) {\n  document.documentElement.style.setProperty(e, t);\n}\nfunction lt(e) {\n  document.documentElement.style.removeProperty(e);\n}\nfunction We(e, t) {\n  t();\n}\n// @__NO_SIDE_EFFECTS__\nfunction E(e, t) {\n  t || (t = {});\n  const n = t.equals || Object.is;\n  let r = [], o = e;\n  const s = (u) => {\n    if (!n(o, u)) {\n      const f = o;\n      o = u, We(c, () => {\n        [...r].forEach(([h, d]) => {\n          h(u, f), d && i(h, !0);\n        });\n      });\n    }\n  };\n  function a(u) {\n    const f = typeof u != \"object\" ? { once: u } : u;\n    return {\n      once: f.once || !1,\n      signal: f.signal || !1\n    };\n  }\n  const i = (u, f) => {\n    const h = a(f), d = r.findIndex(([T, S]) => T === u && S.once === h.once && S.signal === h.signal);\n    d >= 0 && r.splice(d, 1);\n  }, c = Object.assign(\n    function() {\n      return Ie(c), o;\n    },\n    {\n      destroy() {\n        r = [];\n      },\n      set: s,\n      reset() {\n        s(e);\n      },\n      sub(u, f) {\n        return r.push([u, a(f)]), () => i(u, f);\n      },\n      unsub: i,\n      unsubAll() {\n        r = r.filter((u) => u[1].signal);\n      }\n    }\n  );\n  return c;\n}\nconst j = [];\nfunction Ie(e) {\n  j.length && j[j.length - 1].add(e);\n}\nconst ae = /* @__PURE__ */ E(!1), [W, Me] = /* @__PURE__ */ Oe(\"Bridge\", {\n  bgColor: \"#9147ff\",\n  textColor: \"white\",\n  shouldLog: ae\n}), qe = {\n  clipboard_text_received: _({\n    req_id: l(),\n    data: (e) => e === null ? e : l(!0)(e)\n  }, \"clipboard_text_received\"),\n  custom_method_invoked: _({\n    req_id: l(),\n    result: (e) => e,\n    error: l(!0)\n  }, \"custom_method_invoked\"),\n  popup_closed: g(\"popup_closed\", (e) => e ? _({\n    button_id: (t) => t == null ? void 0 : l()(t)\n  })()(e) : {}),\n  viewport_changed: _({\n    height: P(),\n    width: (e) => e == null ? window.innerWidth : P()(e),\n    is_state_stable: $(),\n    is_expanded: $()\n  }, \"viewport_changed\")\n};\nfunction Fe(e) {\n  const t = window, [, n] = L(\n    // Add \"resize\" event listener to make sure, we always have fresh viewport information.\n    // The desktop version of Telegram is sometimes not sending the \"viewport_changed\"\n    // event. For example, when the Main Button is shown. That's why we should\n    // add our own listener to make sure viewport information is always fresh.\n    // Issue: https://github.com/Telegram-Mini-Apps/telegram-apps/issues/10\n    x(t, \"resize\", () => {\n      e([\"viewport_changed\", {\n        width: window.innerWidth,\n        height: window.innerHeight,\n        is_state_stable: !0,\n        is_expanded: !0\n      }]);\n    }),\n    // Add listener, which handles events sent from the Telegram web application and also events\n    // generated by the local emitEvent function.\n    x(t, \"message\", (r) => {\n      if (r.source !== t.parent)\n        return;\n      let o;\n      try {\n        o = Y()(r.data);\n      } catch {\n        return;\n      }\n      const { eventType: s, eventData: a } = o, i = qe[s];\n      try {\n        const c = i ? i()(a) : a;\n        W(\"Event received:\", c ? { eventType: s, eventData: c } : { eventType: s }), e([s, c]);\n      } catch (c) {\n        Me(\n          [\n            `An error occurred processing the \"${s}\" event from the Telegram application.`,\n            \"Please, file an issue here:\",\n            \"https://github.com/Telegram-Mini-Apps/telegram-apps/issues/new/choose\"\n          ].join(`\n`),\n          o,\n          c\n        );\n      }\n    })\n  );\n  return n;\n}\nconst N = /* @__PURE__ */ E(), C = /* @__PURE__ */ E();\nfunction ie() {\n  return C() || C.set(Fe(N.set)), N;\n}\nconst y = /* @__PURE__ */ E({});\nfunction ce(e) {\n  let t = y()[e];\n  return t || (t = /* @__PURE__ */ E(void 0, {\n    equals() {\n      return !1;\n    }\n  }), ie().sub((n) => {\n    n && n[0] === e && t.set(n[1]);\n  }), y.set({ ...y(), [e]: t })), t;\n}\nfunction Je(e, t, n) {\n  return ce(e).sub(t, n);\n}\nconst Be = \"ERR_METHOD_UNSUPPORTED\", He = \"ERR_RETRIEVE_LP_FAILED\", Ge = \"ERR_METHOD_PARAMETER_UNSUPPORTED\", Ve = \"ERR_UNKNOWN_ENV\", Ke = \"ERR_INVOKE_CUSTOM_METHOD_RESPONSE\", ue = /* @__PURE__ */ E(\"https://web.telegram.org\");\nfunction pe(e, t) {\n  W(\"Posting event:\", t ? { eventType: e, eventData: t } : { eventType: e });\n  const n = window;\n  if (ee(n)) {\n    n.TelegramWebviewProxy.postEvent(e, JSON.stringify(t));\n    return;\n  }\n  const r = JSON.stringify({ eventType: e, eventData: t });\n  if (De())\n    return n.parent.postMessage(r, ue());\n  const { external: o } = n;\n  if (_({ notify: Q() })().isValid(o)) {\n    o.notify(r);\n    return;\n  }\n  throw new b(Ve);\n}\nfunction fe(e, t, n) {\n  n || (n = {});\n  const { capture: r } = n, [o, s] = L();\n  return new w((a) => {\n    (Array.isArray(t) ? t : [t]).forEach((i) => {\n      o(\n        Je(i, (c) => {\n          (!r || (Array.isArray(t) ? r({\n            event: i,\n            payload: c\n          }) : r(c))) && a(c);\n        })\n      );\n    }), (n.postEvent || pe)(e, n.params);\n  }, n).finally(s);\n}\nfunction I(e) {\n  return Ae()(e);\n}\nfunction le(e) {\n  return I(\n    e.replace(/^[^?#]*[?#]/, \"\").replace(/[?#]/g, \"&\")\n  );\n}\nfunction Ze() {\n  return le(window.location.href);\n}\nfunction ze() {\n  const e = performance.getEntriesByType(\"navigation\")[0];\n  if (!e)\n    throw new Error(\"Unable to get first navigation entry.\");\n  return le(e.name);\n}\nconst Xe = \"launchParams\";\nfunction Ye() {\n  return I(Le(Xe) || \"\");\n}\nfunction _e(e) {\n  ke(\"launchParams\", /* @__PURE__ */ $e(e));\n}\nfunction be(e) {\n  return e instanceof Error ? e.message + (e.cause ? `\n  ${be(e.cause)}` : \"\") : JSON.stringify(e);\n}\nfunction Qe() {\n  const e = [];\n  for (const t of [\n    // Try to retrieve launch parameters from the current location. This method can return\n    // nothing in case, location was changed, and then the page was reloaded.\n    Ze,\n    // Then, try using the lower level API - window.performance.\n    ze,\n    // Finally, try to extract launch parameters from the session storage.\n    Ye\n  ])\n    try {\n      const n = t();\n      return _e(n), n;\n    } catch (n) {\n      e.push(n);\n    }\n  throw new b(He, [\n    \"Unable to retrieve launch parameters from any known source. Perhaps, you have opened your app outside Telegram?\",\n    \"📖 Refer to docs for more information:\",\n    \"https://docs.telegram-mini-apps.com/packages/telegram-apps-sdk/environment\",\n    \"Collected errors:\",\n    ...e.map((t) => `— ${be(t)}`)\n  ].join(`\n`));\n}\nfunction _t(e) {\n  if (e === \"simple\")\n    try {\n      return Qe(), !0;\n    } catch {\n      return !1;\n    }\n  return w.withFn(async () => {\n    if (ee(window))\n      return !0;\n    try {\n      return await fe(\"web_app_request_theme\", \"theme_changed\", { timeout: 100 }), !0;\n    } catch {\n      return !1;\n    }\n  }, e);\n}\nfunction k(e, t) {\n  window.dispatchEvent(new MessageEvent(\"message\", {\n    data: JSON.stringify({ eventType: e, eventData: t }),\n    // We specify window.parent to imitate the case, the parent iframe sent us this event.\n    source: window.parent\n  }));\n}\nfunction et(e, t) {\n  if (typeof t == \"string\")\n    try {\n      const { eventType: n } = Y()(t);\n      n === \"web_app_request_theme\" && k(\"theme_changed\", {\n        theme_params: JSON.parse(/* @__PURE__ */ X(e))\n      }), n === \"web_app_request_viewport\" && k(\"viewport_changed\", {\n        width: window.innerWidth,\n        height: window.innerHeight,\n        is_state_stable: !0,\n        is_expanded: !0\n      });\n    } catch {\n    }\n}\nfunction bt(e) {\n  var r;\n  const t = typeof e == \"string\" ? I(e) : e;\n  _e(t);\n  const n = (r = window.TelegramWebviewProxy) == null ? void 0 : r.postEvent;\n  window.TelegramWebviewProxy = {\n    postEvent(o, s) {\n      et(t.themeParams, JSON.stringify({ eventType: o, eventData: s })), n == null || n(o, s);\n    }\n  }, W(\"Environment was mocked by the mockTelegramEnv function\");\n}\nfunction gt() {\n  [\n    [\"TelegramGameProxy_receiveEvent\"],\n    // Windows Phone.\n    [\"TelegramGameProxy\", \"receiveEvent\"],\n    // Desktop.\n    [\"Telegram\", \"WebView\", \"receiveEvent\"]\n    // Android and iOS.\n  ].forEach((e) => {\n    let t = window;\n    e.forEach((n, r, o) => {\n      if (r === o.length - 1) {\n        t[n] = k;\n        return;\n      }\n      n in t || (t[n] = {}), t = t[n];\n    });\n  });\n}\nfunction wt() {\n  [\"TelegramGameProxy_receiveEvent\", \"TelegramGameProxy\", \"Telegram\"].forEach((e) => {\n    delete window[e];\n  });\n}\nfunction ht(e, t, n) {\n  ce(e).unsub(t, n);\n}\nfunction dt(e, t) {\n  return ie().sub(e, t);\n}\nfunction mt(e, t) {\n  N.unsub(e, t);\n}\nfunction tt(e) {\n  return ({ req_id: t }) => t === e;\n}\nfunction J(e) {\n  return e.split(\".\").map(Number);\n}\nfunction nt(e, t) {\n  const n = J(e), r = J(t), o = Math.max(n.length, r.length);\n  for (let s = 0; s < o; s += 1) {\n    const a = n[s] || 0, i = r[s] || 0;\n    if (a !== i)\n      return a > i ? 1 : -1;\n  }\n  return 0;\n}\nfunction p(e, t) {\n  return nt(e, t) <= 0;\n}\nfunction B(e, t, n) {\n  if (typeof n == \"string\") {\n    if (e === \"web_app_open_link\") {\n      if (t === \"try_instant_view\")\n        return p(\"6.4\", n);\n      if (t === \"try_browser\")\n        return p(\"7.6\", n);\n    }\n    if (e === \"web_app_set_header_color\" && t === \"color\")\n      return p(\"6.9\", n);\n    if (e === \"web_app_close\" && t === \"return_back\")\n      return p(\"7.6\", n);\n    if (e === \"web_app_setup_main_button\" && t === \"has_shine_effect\")\n      return p(\"7.10\", n);\n  }\n  switch (e) {\n    case \"web_app_open_tg_link\":\n    case \"web_app_open_invoice\":\n    case \"web_app_setup_back_button\":\n    case \"web_app_set_background_color\":\n    case \"web_app_set_header_color\":\n    case \"web_app_trigger_haptic_feedback\":\n      return p(\"6.1\", t);\n    case \"web_app_open_popup\":\n      return p(\"6.2\", t);\n    case \"web_app_close_scan_qr_popup\":\n    case \"web_app_open_scan_qr_popup\":\n    case \"web_app_read_text_from_clipboard\":\n      return p(\"6.4\", t);\n    case \"web_app_switch_inline_query\":\n      return p(\"6.7\", t);\n    case \"web_app_invoke_custom_method\":\n    case \"web_app_request_write_access\":\n    case \"web_app_request_phone\":\n      return p(\"6.9\", t);\n    case \"web_app_setup_settings_button\":\n      return p(\"6.10\", t);\n    case \"web_app_biometry_get_info\":\n    case \"web_app_biometry_open_settings\":\n    case \"web_app_biometry_request_access\":\n    case \"web_app_biometry_request_auth\":\n    case \"web_app_biometry_update_token\":\n      return p(\"7.2\", t);\n    case \"web_app_setup_swipe_behavior\":\n      return p(\"7.7\", t);\n    case \"web_app_setup_secondary_button\":\n    case \"web_app_set_bottom_bar_color\":\n      return p(\"7.10\", t);\n    default:\n      return [\n        \"iframe_ready\",\n        \"iframe_will_reload\",\n        \"web_app_close\",\n        \"web_app_data_send\",\n        \"web_app_expand\",\n        \"web_app_open_link\",\n        \"web_app_ready\",\n        \"web_app_request_theme\",\n        \"web_app_request_viewport\",\n        \"web_app_setup_main_button\",\n        \"web_app_setup_closing_behavior\"\n      ].includes(e);\n  }\n}\nfunction Et(e, t) {\n  t || (t = \"strict\");\n  const n = typeof t == \"function\" ? t : (r) => {\n    const { method: o, version: s } = r;\n    let a, i;\n    if (\"param\" in r ? (a = `Parameter \"${r.param}\" of \"${o}\" method is unsupported in Mini Apps version ${s}`, i = Ge) : (a = `Method \"${o}\" is unsupported in Mini Apps version ${s}`, i = Be), t === \"strict\")\n      throw new b(i, a);\n    return console.warn(a);\n  };\n  return (r, o) => B(r, e) ? Ne(o) && r === \"web_app_set_header_color\" && \"color\" in o && !B(r, \"color\", e) ? n({ version: e, method: r, param: \"color\" }) : pe(r, o) : n({ version: e, method: r });\n}\nfunction yt(e, t, n, r) {\n  return fe(\"web_app_invoke_custom_method\", \"custom_method_invoked\", {\n    ...r || {},\n    params: { method: e, params: t, req_id: n },\n    capture: tt(n)\n  }).then(({ result: o, error: s }) => {\n    if (s)\n      throw new b(Ke, s);\n    return o;\n  });\n}\nfunction rt(e) {\n  e.unsubAll(), e.reset();\n}\nfunction vt() {\n  var e;\n  (e = C()) == null || e(), [\n    ...Object.values(y()),\n    y,\n    N,\n    C,\n    ue,\n    ae\n  ].forEach(rt);\n}\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@telegram-apps/bridge/dist/index.js\n");

/***/ })

};
;